package com.remedios.gui.curso.infra;

import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneOffset;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.auth0.jwt.JWT;
import com.auth0.jwt.algorithms.Algorithm;
import com.auth0.jwt.exceptions.JWTCreationException;
import com.auth0.jwt.exceptions.JWTVerificationException;
import com.remedios.gui.curso.usuario.Usuario;

@Service
public class TokenService {

	@Value("${api.security.token.secret}")
	private String secret;

	public String gerarToken(Usuario usuario) {
		try {
			// Podemos encadear para mandar mais informações no token (decode)
//			.withClaim("id", usuario.getId())
//	        .withClaim("login", usuario.getLogin())
//	        .withClaim("senha", usuario.getSenha())

			var algorithm = Algorithm.HMAC256(secret);
			return JWT.create().withIssuer("Remedios_api").withSubject(usuario.getLogin())
					.withExpiresAt(dataExpiracao()).sign(algorithm);
		} catch (JWTCreationException exception) {
			throw new RuntimeException("Erro ao gerar token", exception);
		}
	}

	public String getSubject(String tokenJWT) {
		try {
			var algorithm = Algorithm.HMAC256(secret);
		    return JWT.require(algorithm)
		        // specify any specific claim validations
		        .withIssuer("Remedios_api")
		        // reusable verifier instance
		        .build()
		        .verify(tokenJWT);
		        
		    decodedJWT = verifier.verify(token);
		} catch (JWTVerificationException exception){
		    // Invalid signature/claims
		}
	}

	private Instant dataExpiracao() {
		return LocalDateTime.now().plusHours(2).toInstant(ZoneOffset.of("-03:00"));
	}
}
